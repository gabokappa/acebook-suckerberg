# frozen_string_literal: true
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe AlbumsController, type: :controller do

  let(:valid_attributes) {{name: 'testalbum'}}
  let(:changed_attributes) {{name: 'test_change'}}

  let(:invalid_attributes) {{date: 'testalbum'}}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AlbumsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    login_user
    it 'returns a success response' do
      user = FactoryBot.create(:user)
      Album.create! valid_attributes.merge(user_id: user.id)
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    login_user
    it 'returns a success response' do
      user = FactoryBot.create(:user)
      album = Album.create! valid_attributes.merge(user_id: user.id)
      get :show, params: {id: album.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  # describe 'GET #new' do
  #   login_user
  #   it 'returns a success response' do
  #     get :new, params: {name: 'test'}, session: valid_session
  #     expect(response).to be_successful
  #   end
  # end
  #
  # describe 'GET #edit' do
  #   skip do
  #     login_user
  #     it 'returns a success response' do
  #       user = FactoryBot.create(:user)
  #       sign_in user
  #       album = Album.create! valid_attributes.merge(user_id: user.id)
  #       get :edit, params: {album: album.to_param, name: 'test_change'}, session: valid_session
  #       expect(album.name).to eq('test_change')
  #     end
  #   end
  # end
  #
  # describe 'POST #create' do
  #   # login_user
  #   context 'with valid params' do
  #     it 'creates a new Album' do
  #       expect do
  #         post :create, params: {album: valid_attributes}, session: valid_session
  #       end.to change(Album, :count).by(1)
  #     end
  #     it 'redirects to the created album' do
  #       post :create, params: {album: valid_attributes}, session: valid_session
  #       expect(response).to redirect_to('/')
  #     end
  #   end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {album: invalid_attributes}, session: valid_session
        expect(response).to_not be_successful
      end
    end
    describe 'PUT #update' do
      login_user
      context 'with valid params' do
        let(:new_attributes) {{name: 'test_change'}}
      end

      it 'updates the requested album' do
        # skip do
          # @request.env['devise.mapping'] = Devise.mappings[:user]
          test_user = FactoryBot.create(:user)
          logout(:user)
          sign_in test_user
          album = Album.create! valid_attributes.merge(user_id: test_user.id)
          # expect(album.name).to eq('testalbum')
          p "============ #{album.user_id} ==========="
          p "============ #{test_user.id} ==========="
          put :update, params: {id: album.to_param, album: changed_attributes}, session: valid_session
          # put :update, params: {id: album.to_param, name: 'test_change'}
          expect(album.name).to eq('test_change')
        # end
      end

      it 'redirects to the album' do
        user = FactoryBot.create(:user)
        sign_in user
        album = Album.create! valid_attributes.merge(user_id: user.id)
        put :update, params: {id: album.to_param, album: valid_attributes}, session: valid_session
        expect(response).to redirect_to('/')
      end
    end

#     context 'with invalid params' do
#       it "throws an error)" do
#         user = FactoryBot.create(:user)
#         album = Album.create! valid_attributes.merge(user_id: user.id)
#         put :update, params: {id: album.to_param, album: invalid_attributes}, session: valid_session
#         expect(response).not_to be_successful
#       end
#     end
#   end
#
#   describe 'DELETE #destroy' do
#     login_user
#     it 'destroys the requested album' do
#       logout(:user)
#       user = FactoryBot.create(:user)
#       sign_in user
#       album = Album.create! valid_attributes.merge(user_id: user.id)
#       delete :destroy, params: {album_id: album.id, album: album.to_param, id: album.id, user_id: user.id}, session: valid_session
#       expect(Album.count).to eq 0
#     end
#
#     it 'redirects to root' do
#       user = FactoryBot.create(:user)
#       album = Album.create! valid_attributes.merge(user_id: user.id)
#       delete :destroy, params: {id: album.to_param}, session: valid_session
#       expect(response).to redirect_to('/')
#     end
#     it 'deletes the pic' do
#       skip do
#         user = FactoryBot.create(:user)
#         sign_in user
#         album = Album.create! valid_attributes.merge(user_id: user.id)
#         album.pics.fixture_file_upload "#{::Rails.root}/cat.jpeg", 'image/jpg'
#         expect(album.pics.attached?).to eq(true)
#         get :destroy_pic, params: {album_id: album.id, user_id: user.id}, session: valid_session
#         expect(album.pics.attached?).to eq(false)
#       end
#     end
#   end
end
